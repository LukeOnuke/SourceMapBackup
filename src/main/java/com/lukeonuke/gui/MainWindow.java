package com.lukeonuke.gui;

import com.lukeonuke.AwtHandler;
import com.lukeonuke.Backup;
import com.lukeonuke.Config;
import com.lukeonuke.ProgressCallback;
import com.lukeonuke.file.ZipFile;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import java.awt.*;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.io.File;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.Objects;
import java.util.logging.Logger;
import java.util.stream.Collectors;

public class MainWindow extends JFrame {
    private JButton copyButton;
    private JProgressBar progressBar1;
    private JTable archiveTable;
    private JPanel mainPanel;
    private JTabbedPane tabbedPane1;
    private JTextArea console;
    private JScrollPane archives;

    private final Config config = Config.getInstance();

    public MainWindow() {
        setContentPane(mainPanel);
        setTitle("Map version control : " + new File(config.getMapPath()).getName());
        setSize(400, 600);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setVisible(true);

        Logger logger = Logger.getLogger("logger");
        logger.addHandler(new AwtHandler(console));

        logger.info("Ready!");

        final ProgressCallback progressCallback = new ProgressCallback(progressBar1);

        copyButton.addActionListener(e -> {
            progressCallback.call(0);
            new Backup(logger, progressCallback).doBackup();
        });

        refreshBackupsTable(archiveTable);
        archives.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentShown(ComponentEvent e) {
                refreshBackupsTable(archiveTable);
                super.componentShown(e);
            }
        });
    }

    private void refreshBackupsTable(JTable archiveTable) {
        new Thread(() -> {
            File[] backupsArray = new File(config.getArchivePath()).listFiles();
            if (Objects.isNull(backupsArray)) return;
            final ArrayList<File> backups = (ArrayList<File>) Arrays.stream(backupsArray).sorted((f1, f2) -> {
                return Long.compare(f1.lastModified(), f2.lastModified());
            }).collect(Collectors.toList());
            DefaultTableModel tableModel = new DefaultTableModel(new String[]{"Name", "Size"}, 0);
            archiveTable.setModel(tableModel);
            SwingUtilities.invokeLater(() -> {
                backups.forEach(file -> {
                    tableModel.addRow(new String[]{file.getName(), (file.length() / 1024L) + "kb"});
                });
            });
        }).start();
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane1 = new JTabbedPane();
        mainPanel.add(tabbedPane1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        tabbedPane1.addTab("Backup", panel1);
        progressBar1 = new JProgressBar();
        panel1.add(progressBar1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        console = new JTextArea();
        console.setLineWrap(true);
        scrollPane1.setViewportView(console);
        copyButton = new JButton();
        copyButton.setText("Copy");
        panel1.add(copyButton, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        archives = new JScrollPane();
        tabbedPane1.addTab("Archive list", archives);
        archives.setBorder(BorderFactory.createTitledBorder(null, "Archives", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        archiveTable = new JTable();
        archiveTable.setEnabled(false);
        archives.setViewportView(archiveTable);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
